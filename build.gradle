plugins {
    id 'java'
    id 'me.champeau.jmh' version '0.7.2'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.15.0'
}

jacoco {
  toolVersion = '0.8.12'
}

apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'info.solidsoft.pitest'

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

jacocoTestReport {
  reports {
    xml.required.set(true)
    csv.required.set(true)
    html.required.set(true)
  }
}

jmh {
    iterations = 3
    warmupIterations = 1
    threads = 1

    jvmArgs.add('-Djava.util.logging.config.file=src/main/resources/logging.properties')

//    includes = ['HibernateRequestBenchmark']
}

group = 'com.tngtech'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'

    implementation 'org.postgresql:postgresql:42.5.1'
    implementation 'com.zaxxer:HikariCP:5.1.0'

    implementation 'org.openjdk.jmh:jmh-core:1.33'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.33'

    implementation 'io.projectreactor:reactor-core:3.4.10'

    implementation 'io.r2dbc:r2dbc-spi:1.0.0.RELEASE'
    implementation 'io.r2dbc:r2dbc-pool:1.0.1.RELEASE'
    implementation 'org.postgresql:r2dbc-postgresql:1.0.4.RELEASE'

    implementation 'org.hibernate.orm:hibernate-core:6.4.4.Final'
    implementation 'org.hibernate.orm:hibernate-hikaricp:6.4.4.Final'
    pitest 'org.pitest:pitest-junit5-plugin:1.2.0'
}

tasks.withType(JavaCompile) {
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Ensures the report is generated after tests

    // Detailed test logging configuration
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full" // Show full stack traces for exceptions
        showStandardStreams = true // Show standard output and error streams
    }
}

tasks.withType(JavaExec) {
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

// Define a custom extension for PIT configuration
extensions.create('pitestConfig', PitestExtension)

class PitestExtension {
    String targetClasses
    String targetTests
}

pitest {
    fullMutationMatrix = true
    outputFormats = ['HTML', 'XML']
    targetClasses = ['com.tngtech.java_virtual_thread_benchmark.*']
    targetTests = ['*']
}